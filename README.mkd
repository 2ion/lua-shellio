### lua-shellio

Using lua-filterpipe, this package provides convenience wrapper
functions around the classic binutils and/or coreutils like cat, tac,
head, tail etc so that they can be used with ease as filters from Lua
programs.

In addition, this package provides a pipe object that makes using Unix
pipelines in Lua programs extremely easy. It stores the pipeline's
output and can be referred to or continued at any later point.
Here's how it works:

```lua
local sh = require 'shellio'

-- let's get a list of a user's connection endpoints!

local P = sh.Pipe.new()
  ("lsof", "-i")
  ("grep", os.getenv("USER"))
  ("awk", "-F->", "{print $2}")
  ("cut", "-d:", "-f1")

print(P.data) -- the .data member contains the pipe's output

P("tac") -- continue processing the output

print(P.data) -- print the altered output
```

There's also a stack feature which keeps the results of every pipe
component in memory. Just construct the pipe with a true argument:
```lua
local Q = sh.Pipe.new(true)
```
and after a pipe invocation,
```lua
P.stack
```
will hold an array of all intermediate also the final result.
